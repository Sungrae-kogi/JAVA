Generic -> 일반화 프로그래밍잉라고 한다

Java코드를 짜다보면 변수형이나 클래스를 제외하고 내부코드는 같은데 변수형이 달라 코드를 다시 짜야하는 경우


ex)
class Point{
	private int x;
	private int y;
	void swap(){
		int tmp = x;
		x=y;
		y=tmp;
	}
}
//위 클래스에서 경우에 따라 속성이 float이나 double, 혹은 String으로 쓰고싶은 상황에서는 클래스를 새로 만들어야하게됨
// 예제를 보
class class_name <token>{
	syntax;
}

여기서 token은 어떤 알파벳을 쓰건, 문장을 쓰건 상관없다, 책에서는 주로 T라고나올거며 딕셔너리, 맵같은곳에선
K,V같은 토큰으로도 표현될 것 아무 상관없다, 원하는 알파벳넣어도 된다


public class test{
	public static ~~~~~~Main(stirngf args){
		Point<Integer> p = new Point<Integer> (10,20);
		p.Print();
		}
	}
	
	//Generic토큰으로 E를 지정하고 그 밑에 변수들 타입을 E로 지정
class Point<E>{
	private E x;
	private E y;

	Point(E x,E y){
		this.x = x;
		this.y = y;
	}

	void swap(){
		E tmp = x;
		x=y;
		y=tmp;
	}
	void Print(){
		System.out.println(x);
		System.out.println(y);
	}
}


//test 클래스를 보면 토큰으로 Integer 인트형을 넣었다, 그 경우 자동으로 E는 Integer로 로 치환
//유연성 있는 프로그래밍이 가능하게 된다.

++추가내용
만일 제네릭으로 구현한 클래스에 토큰을 적지 않으면??
ex) Point p = new Point(10,20); 
이때 Point 클래스는 제네릭으로 선언한 상태
>> 이 클래스는 모든 형태를 받을 수 있는 상태가 된다. 이럴 경우를 원천타입(raw type) 혹은 원시 타입이라고 부른다.
	원천 타입은 Object 타입과는 다르다!

제네릭으로 static 속석ㅇ을 만들 수 없습니다. 인스턴스에나 제네릭이 의미를 가지고
클래스 속성은 제네릭이 의미가 없기 때문


